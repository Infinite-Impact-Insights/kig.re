#!/usr/bin/env ruby -W0
# frozen_string_literal: true

# vim: ft=ruby

require 'listen'
require 'colored2'
require 'tty-box'
require 'tty-screen'

require_relative '../lib/ui_widgets'

module Jekyll
  class FileChangeListener
    class << self
      attr_accessor :ignored, :types
    end

    # self.types = {
    #   modified: { letter: '✏️', color: :blue },
    #   added:    { letter: '✅', color: :green },
    #   removed:  { letter: '💣️', color: :red },
    # }

    self.types = {
      modified: { letter: '⊘', color: :blue },
      added:    { letter: '+', color: :green },
      removed:  { letter: '✘', color: :red },
    }

    self.ignored = [
        /^\.idea/,
        /^\.sass-cache/,
        /^\.vscode/,
        /^\.git/,
        /^\.jsh/,
        /^\.editorconfig/,
        /^_site.*\.html$/,
        /^Gemfile/,
        /^Rakefile/,
        /^lib/,
        /^package/,
        /^node_modules/,
        /^graphics/,
        /^dist/,
        /^bin/,
    ]

    include UIWidgets

    attr_accessor :listener, :last

    def initialize
      clear_screen!
      info "Starting Listener at #{Dir.pwd}...",
           "Ignoring Regex: ", ignored.map(&:to_s)

      self.last     = { added: [], removed: [], modified: [] }
      self.listener = Listen.to('.',
                                ignore:         ignored,
                                wait_for_delay: 0.2,
                                latency:        0.1,
                                relative:       true,
                                &method(:process_event))
    end

    def execute!
      listener.start
      sleep
    end

    private

    def process_event(modified, added, removed)
      if (modified.size + added.size + removed.size) > 0
        if last[:modified] != modified ||
           last[:removed] != removed ||
           last[:added] != added
          files = format(modified, :modified) << format(added, :added) << format(removed, :removed)
          text_box(text: files, cursor_action_before: :prev_line)
        end
      end

      last[:modified] = modified
      last[:removed]  = removed
      last[:added]    = added
    rescue StandardError => e
      warn e.inspect.bold.red + ", ignoring and attempting continue...", e.backtrace
    end

    def ignored
      self.class.ignored
    end

    def format(array, type)
      color  = self.class.types[type][:color]
      letter = self.class.types[type][:letter]
      array.map { |e| "[ #{letter} ] #{e}" }.map { |e| e.send(color).bold }
    end
  end
end

Jekyll::FileChangeListener.new.execute!
